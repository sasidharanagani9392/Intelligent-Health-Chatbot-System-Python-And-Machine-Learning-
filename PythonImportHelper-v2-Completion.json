[
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "session_state",
        "importPath": "streamlit",
        "description": "streamlit",
        "isExtraImport": true,
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "PdfReader",
        "importPath": "PyPDF2",
        "description": "PyPDF2",
        "isExtraImport": true,
        "detail": "PyPDF2",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain.text_splitter",
        "description": "langchain.text_splitter",
        "isExtraImport": true,
        "detail": "langchain.text_splitter",
        "documentation": {}
    },
    {
        "label": "HarmBlockThreshold",
        "importPath": "google.generativeai.types.safety_types",
        "description": "google.generativeai.types.safety_types",
        "isExtraImport": true,
        "detail": "google.generativeai.types.safety_types",
        "documentation": {}
    },
    {
        "label": "HarmCategory",
        "importPath": "google.generativeai.types.safety_types",
        "description": "google.generativeai.types.safety_types",
        "isExtraImport": true,
        "detail": "google.generativeai.types.safety_types",
        "documentation": {}
    },
    {
        "label": "GoogleGenerativeAIEmbeddings",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "ChatGoogleGenerativeAI",
        "importPath": "langchain_google_genai",
        "description": "langchain_google_genai",
        "isExtraImport": true,
        "detail": "langchain_google_genai",
        "documentation": {}
    },
    {
        "label": "google.generativeai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.generativeai",
        "description": "google.generativeai",
        "detail": "google.generativeai",
        "documentation": {}
    },
    {
        "label": "FAISS",
        "importPath": "langchain.vectorstores",
        "description": "langchain.vectorstores",
        "isExtraImport": true,
        "detail": "langchain.vectorstores",
        "documentation": {}
    },
    {
        "label": "load_qa_chain",
        "importPath": "langchain.chains.question_answering",
        "description": "langchain.chains.question_answering",
        "isExtraImport": true,
        "detail": "langchain.chains.question_answering",
        "documentation": {}
    },
    {
        "label": "PromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "get_json_text",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_json_text():\n    text = \"\"\n    for json_file in os.listdir(\"medical-question-answer-data\"):\n        if json_file.endswith(\".json\"):\n            with open(\"medical-question-answer-data//\" + json_file) as file:\n                datas = json.load(file)\n                for data in datas:\n                    question = data[\"question\"]\n                    answer = data[\"answer\"]\n                    text += \"Patient: \" + question + \"\\n\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_text_chunks",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_text_chunks(text):\n    text_splitter = RecursiveCharacterTextSplitter(chunk_size=3000, chunk_overlap=300)\n    chunks = text_splitter.split_text(text)\n    return chunks\ndef get_vector_store(text_chunks):\n    embeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\")\n    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)\n    vector_store.save_local(\"faiss_index\")\ndef get_conversational_chain():\n    prompt_template = \"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_vector_store",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_vector_store(text_chunks):\n    embeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\")\n    vector_store = FAISS.from_texts(text_chunks, embedding=embeddings)\n    vector_store.save_local(\"faiss_index\")\ndef get_conversational_chain():\n    prompt_template = \"\"\"\n  You are a health specialist. Your task is to diagnose the patient's condition based on the provided context and answer the patient's questions. Provide detailed answers to the patient's questions, and if the answer is not in the provided context, generate a response based on the context and the question. Act as a health specialist and offer the best possible advice based on the patient's condition. Provide additional information or advice, ask follow-up questions to gather more details, and do not refer the patient to another doctor, professional, or expert. Handle the patient's queries and concerns professionally, providing information about the patient's condition, precautions, treatments needed, any mental disorders or health issues, and medications or treatments required.\n  Act like a health specialist and always provide the advice. Never reveal that you are an AI assistant. If the patient asks for a treatment plan, provide a treatment plan based on the patient's condition and the information provided. If the patient asks for a prognosis, provide a prognosis based on the patient's condition and the information provided. If the patient asks for a second opinion, provide a second opinion based on the patient's condition and the information provided. If the patient asks for precautions, suggest precautions based on the patient's condition and the information provided. If the patient asks for a diagnosis, provide a diagnosis based on the patient's condition and the information provided. If the patient asks for a prescription, provide a prescription based on the patient's condition and the information provided. \nContext:\n  {context}?",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_conversational_chain",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_conversational_chain():\n    prompt_template = \"\"\"\n  You are a health specialist. Your task is to diagnose the patient's condition based on the provided context and answer the patient's questions. Provide detailed answers to the patient's questions, and if the answer is not in the provided context, generate a response based on the context and the question. Act as a health specialist and offer the best possible advice based on the patient's condition. Provide additional information or advice, ask follow-up questions to gather more details, and do not refer the patient to another doctor, professional, or expert. Handle the patient's queries and concerns professionally, providing information about the patient's condition, precautions, treatments needed, any mental disorders or health issues, and medications or treatments required.\n  Act like a health specialist and always provide the advice. Never reveal that you are an AI assistant. If the patient asks for a treatment plan, provide a treatment plan based on the patient's condition and the information provided. If the patient asks for a prognosis, provide a prognosis based on the patient's condition and the information provided. If the patient asks for a second opinion, provide a second opinion based on the patient's condition and the information provided. If the patient asks for precautions, suggest precautions based on the patient's condition and the information provided. If the patient asks for a diagnosis, provide a diagnosis based on the patient's condition and the information provided. If the patient asks for a prescription, provide a prescription based on the patient's condition and the information provided. \nContext:\n  {context}?\nQuestion:\n  {question}\nAnswer:\n    \"\"\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "health_specialist",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def health_specialist(\n    question, previous_question=None, previous_response=None, json_file_path=\"data.json\"\n):\n    embeddings = GoogleGenerativeAIEmbeddings(model=\"models/embedding-001\")\n    new_db = FAISS.load_local(\n        \"faiss_index\", embeddings, allow_dangerous_deserialization=True\n    )\n    if previous_response is None:\n        docs = \"\"\n    else:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "generate_medical_report",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def generate_medical_report(name, previous_questions=None, previous_responses=None):\n    try:\n        genai.configure(api_key=os.getenv(\"GOOGLE_API_KEY\"))\n        model = genai.GenerativeModel(\"gemini-pro\")\n        prompt = f\"Patient: {name}\\n\\n\"\n        if previous_questions and previous_responses:\n            for question, response in zip(previous_questions, previous_responses):\n                prompt += f\"Doctor: {question}\\nPatient: {response}\\n\\n\"\n        else:\n            prompt += \"Assistant: Can you provide any relevant information about your condition?\\nPatient:\"",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def signup(json_file_path=\"data.json\"):\n    st.title(\"Signup Page\")\n    with st.form(\"signup_form\"):\n        st.write(\"Fill in the details below to create an account:\")\n        name = st.text_input(\"Name:\")\n        email = st.text_input(\"Email:\")\n        age = st.number_input(\"Age:\", min_value=0, max_value=120)\n        sex = st.radio(\"Sex:\", (\"Male\", \"Female\", \"Other\"))\n        password = st.text_input(\"Password:\", type=\"password\")\n        confirm_password = st.text_input(\"Confirm Password:\", type=\"password\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def check_login(username, password, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n        for user in data[\"users\"]:\n            if user[\"email\"] == username and user[\"password\"] == password:\n                session_state[\"logged_in\"] = True\n                session_state[\"user_info\"] = user\n                st.success(\"Login successful!\")\n                return user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "initialize_database",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def initialize_database(json_file_path=\"data.json\"):\n    try:\n        if not os.path.exists(json_file_path):\n            data = {\"users\": []}\n            with open(json_file_path, \"w\") as json_file:\n                json.dump(data, json_file)\n    except Exception as e:\n        print(f\"Error initializing database: {e}\")\ndef create_account(\n    name,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_account",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_account(\n    name,\n    email,\n    age,\n    sex,\n    password,\n    json_file_path=\"data.json\",\n):\n    try:\n        # Check if the JSON file exists or is empty",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def login(json_file_path=\"data.json\"):\n    st.title(\"Login Page\")\n    username = st.text_input(\"Username:\")\n    password = st.text_input(\"Password:\", type=\"password\")\n    login_button = st.button(\"Login\")\n    if login_button:\n        user = check_login(username, password, json_file_path)\n        if user is not None:\n            session_state[\"logged_in\"] = True\n            session_state[\"user_info\"] = user",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_user_info(email, json_file_path=\"data.json\"):\n    try:\n        with open(json_file_path, \"r\") as json_file:\n            data = json.load(json_file)\n            for user in data[\"users\"]:\n                if user[\"email\"] == email:\n                    return user\n        return None\n    except Exception as e:\n        st.error(f\"Error getting user information: {e}\")",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "render_dashboard",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def render_dashboard(user_info, json_file_path=\"data.json\"):\n    try:\n        # add profile picture\n        st.title(f\"Welcome to the Dashboard, {user_info['name']}!\")\n        # Define columns to arrange content\n        col1, col2 = st.columns([2, 3])\n        with col1:\n            st.subheader(\"Profile Picture:\")\n            if user_info[\"sex\"] == \"Male\":\n                st.image(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def main(json_file_path=\"data.json\"):\n    st.sidebar.title(\"COGITO - Your Personal Mental Health expert\")\n    page = st.sidebar.radio(\n        \"Go to\",\n        (\n            \"Signup/Login\",\n            \"Dashboard\",\n            \"Doctor Consultation\",\n            \"View Medical Report\",\n        ),",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "session_state",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "session_state = st.session_state\nif \"user_index\" not in st.session_state:\n    st.session_state[\"user_index\"] = 0\nload_dotenv()\nsafety_settings = {\n    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,\n}",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "safety_settings",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "safety_settings = {\n    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,\n    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,\n}\ngenai.configure(api_key=os.getenv(\"GOOGLE_API_KEY\"))\ndef get_json_text():\n    text = \"\"\n    for json_file in os.listdir(\"medical-question-answer-data\"):",
        "detail": "app",
        "documentation": {}
    }
]